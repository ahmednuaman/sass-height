@mixin height($font-size, $desired-height, $padding: 'vertical'){
  
  $options: (
    font-base: 16px,
    rem: true,
    baseline: 4px,
    debug: false
  );

  // Check if there are custom options set
  @if global-variable-exists(sassheight) {
    // Merge them with the defaults
    $options: map-merge($options, $sassheight);
  }

  $font-unit: unit($font-size);
  $font-value: parseInt($font-size) !default;
  $height-unit: unit($desired-height);
  $height-value: parseInt($desired-height) !default;
  $font-base: parseInt(map-get($options, font-base));
  $baseline: parseInt(map-get($options, baseline)) !default;
  $modifier: $baseline !default;
  $rem: map-get($options, rem);
  $debug: map-get($options, debug);

  // If rems are enforced
  @if $rem == true {

    // Convert the baseline to unitless rems
    $baseline: $baseline/$font-base;
    $modifier: $baseline;

    // If the font size is in rems
    @if $font-unit != 'rem' {
      $font-value: $font-value/$font-base;
    }
    // If the height is in rems
    @if $height-unit != 'rem' {
      $height-value: $height-value/$font-base;
    }
  }

  // If rems are not enforced
  @else if $rem == false {

    // If the font size is in rems
    @if $font-unit == 'rem' {
      $font-value: $font-value * $font-base;
    }
    // If the height is in rems
    @if $height-unit == 'rem' {
      $height-value: $height-value * $font-base;
    }
  }

  @if $height-unit != 'rem' and $height-unit != 'px' {
    @error '#{$height-unit} is not supported!'
  }

  @if $font-unit != 'rem' and $font-unit != 'px' {
    @error '#{$font-unit} is not supported!'
  }

  // Warn if the font-size is greater than the height
  @if $font-value > $height-value  {
    @warn 'The font size should not exceed the desired height.';
  }

  // If the overall height is the same as the font base then
  // it's probably desired so don't step up to the next multiple
  @if ($height-value == $font-base) or ($height-value == 1) {
    $modifier: 0;
  }

  // Calculate the relative, valueless line-height
  $lh: (roundUp($font-value, $baseline) + $modifier) / $font-value;

  // Calculate the actual px dimensions
  $lh-realised: $font-value * $lh;

  // Calculate the remaining space available and halve it
  $offset: ($height-value - $lh-realised)/2;

  // Debug
  // Simply output the varaibles as CSS properties
  // for easy inspection in dev tools.
  @if $debug {
    rem-output: $rem;
    font-value: $font-value;
    font-unit: $font-unit;
    height-value: $height-value;
    height-unit: $height-unit;
    lh: $lh;
    lh-realised: $lh-realised;
    offset: $offset;
  }

  font-size: if($rem, $font-value + rem, $font-size);
  line-height: $lh;

  // Only add padding if the offset is truthy
  @if $offset > 0 {

    // If all padding is specified we add the shorthand
    @if $padding == 'all' {
      padding: if($rem, $offset + rem, $offset + px);
    }

    // Otherwise it's just top and bottom
    @else if $padding == 'vertical' {
      padding-bottom: if($rem, $offset + rem, $offset + px);
      padding-top: if($rem, $offset + rem, $offset + px);
    }
  }
}